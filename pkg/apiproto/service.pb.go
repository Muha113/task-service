// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package apiproto is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Employee
	Company
	ResponseEmployee
	ResponseCompany
*/
package apiproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Employee struct {
	Id         int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SecondName string `protobuf:"bytes,3,opt,name=second_name,json=secondName" json:"second_name,omitempty"`
	Surname    string `protobuf:"bytes,4,opt,name=surname" json:"surname,omitempty"`
	HireDate   string `protobuf:"bytes,5,opt,name=hire_date,json=hireDate" json:"hire_date,omitempty"`
	Position   string `protobuf:"bytes,6,opt,name=position" json:"position,omitempty"`
	CompanyId  int64  `protobuf:"varint,7,opt,name=company_id,json=companyId" json:"company_id,omitempty"`
}

func (m *Employee) Reset()                    { *m = Employee{} }
func (m *Employee) String() string            { return proto.CompactTextString(m) }
func (*Employee) ProtoMessage()               {}
func (*Employee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Employee) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Employee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Employee) GetSecondName() string {
	if m != nil {
		return m.SecondName
	}
	return ""
}

func (m *Employee) GetSurname() string {
	if m != nil {
		return m.Surname
	}
	return ""
}

func (m *Employee) GetHireDate() string {
	if m != nil {
		return m.HireDate
	}
	return ""
}

func (m *Employee) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Employee) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

type Company struct {
	Id        int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	LegalForm string `protobuf:"bytes,3,opt,name=legal_form,json=legalForm" json:"legal_form,omitempty"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Company) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetLegalForm() string {
	if m != nil {
		return m.LegalForm
	}
	return ""
}

type ResponseEmployee struct {
	Status   int32       `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Employee []*Employee `protobuf:"bytes,2,rep,name=employee" json:"employee,omitempty"`
}

func (m *ResponseEmployee) Reset()                    { *m = ResponseEmployee{} }
func (m *ResponseEmployee) String() string            { return proto.CompactTextString(m) }
func (*ResponseEmployee) ProtoMessage()               {}
func (*ResponseEmployee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseEmployee) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ResponseEmployee) GetEmployee() []*Employee {
	if m != nil {
		return m.Employee
	}
	return nil
}

type ResponseCompany struct {
	Status  int32      `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Company []*Company `protobuf:"bytes,2,rep,name=company" json:"company,omitempty"`
}

func (m *ResponseCompany) Reset()                    { *m = ResponseCompany{} }
func (m *ResponseCompany) String() string            { return proto.CompactTextString(m) }
func (*ResponseCompany) ProtoMessage()               {}
func (*ResponseCompany) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResponseCompany) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ResponseCompany) GetCompany() []*Company {
	if m != nil {
		return m.Company
	}
	return nil
}

func init() {
	proto.RegisterType((*Employee)(nil), "apiproto.Employee")
	proto.RegisterType((*Company)(nil), "apiproto.Company")
	proto.RegisterType((*ResponseEmployee)(nil), "apiproto.ResponseEmployee")
	proto.RegisterType((*ResponseCompany)(nil), "apiproto.ResponseCompany")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskRepo service

type TaskRepoClient interface {
	AddNewEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error)
	UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error)
	FindEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error)
	UpdateEmployeeWithFormData(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error)
	DeleteEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error)
	AddNewCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error)
	UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error)
	FindCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error)
	UpdateCompanyWithFormData(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error)
	DeleteCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error)
	GetCompanyEmployeesList(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseEmployee, error)
}

type taskRepoClient struct {
	cc *grpc.ClientConn
}

func NewTaskRepoClient(cc *grpc.ClientConn) TaskRepoClient {
	return &taskRepoClient{cc}
}

func (c *taskRepoClient) AddNewEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error) {
	out := new(ResponseEmployee)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/AddNewEmployee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error) {
	out := new(ResponseEmployee)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/UpdateEmployee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) FindEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error) {
	out := new(ResponseEmployee)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/FindEmployee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) UpdateEmployeeWithFormData(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error) {
	out := new(ResponseEmployee)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/UpdateEmployeeWithFormData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) DeleteEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseEmployee, error) {
	out := new(ResponseEmployee)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/DeleteEmployee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) AddNewCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error) {
	out := new(ResponseCompany)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/AddNewCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error) {
	out := new(ResponseCompany)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/UpdateCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) FindCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error) {
	out := new(ResponseCompany)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/FindCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) UpdateCompanyWithFormData(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error) {
	out := new(ResponseCompany)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/UpdateCompanyWithFormData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) DeleteCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseCompany, error) {
	out := new(ResponseCompany)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/DeleteCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRepoClient) GetCompanyEmployeesList(ctx context.Context, in *Company, opts ...grpc.CallOption) (*ResponseEmployee, error) {
	out := new(ResponseEmployee)
	err := grpc.Invoke(ctx, "/apiproto.TaskRepo/GetCompanyEmployeesList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskRepo service

type TaskRepoServer interface {
	AddNewEmployee(context.Context, *Employee) (*ResponseEmployee, error)
	UpdateEmployee(context.Context, *Employee) (*ResponseEmployee, error)
	FindEmployee(context.Context, *Employee) (*ResponseEmployee, error)
	UpdateEmployeeWithFormData(context.Context, *Employee) (*ResponseEmployee, error)
	DeleteEmployee(context.Context, *Employee) (*ResponseEmployee, error)
	AddNewCompany(context.Context, *Company) (*ResponseCompany, error)
	UpdateCompany(context.Context, *Company) (*ResponseCompany, error)
	FindCompany(context.Context, *Company) (*ResponseCompany, error)
	UpdateCompanyWithFormData(context.Context, *Company) (*ResponseCompany, error)
	DeleteCompany(context.Context, *Company) (*ResponseCompany, error)
	GetCompanyEmployeesList(context.Context, *Company) (*ResponseEmployee, error)
}

func RegisterTaskRepoServer(s *grpc.Server, srv TaskRepoServer) {
	s.RegisterService(&_TaskRepo_serviceDesc, srv)
}

func _TaskRepo_AddNewEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).AddNewEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/AddNewEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).AddNewEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/UpdateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).UpdateEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_FindEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).FindEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/FindEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).FindEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_UpdateEmployeeWithFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).UpdateEmployeeWithFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/UpdateEmployeeWithFormData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).UpdateEmployeeWithFormData(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/DeleteEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).DeleteEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_AddNewCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).AddNewCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/AddNewCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).AddNewCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).UpdateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_FindCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).FindCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/FindCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).FindCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_UpdateCompanyWithFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).UpdateCompanyWithFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/UpdateCompanyWithFormData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).UpdateCompanyWithFormData(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).DeleteCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRepo_GetCompanyEmployeesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRepoServer).GetCompanyEmployeesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiproto.TaskRepo/GetCompanyEmployeesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRepoServer).GetCompanyEmployeesList(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskRepo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiproto.TaskRepo",
	HandlerType: (*TaskRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewEmployee",
			Handler:    _TaskRepo_AddNewEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _TaskRepo_UpdateEmployee_Handler,
		},
		{
			MethodName: "FindEmployee",
			Handler:    _TaskRepo_FindEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployeeWithFormData",
			Handler:    _TaskRepo_UpdateEmployeeWithFormData_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _TaskRepo_DeleteEmployee_Handler,
		},
		{
			MethodName: "AddNewCompany",
			Handler:    _TaskRepo_AddNewCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _TaskRepo_UpdateCompany_Handler,
		},
		{
			MethodName: "FindCompany",
			Handler:    _TaskRepo_FindCompany_Handler,
		},
		{
			MethodName: "UpdateCompanyWithFormData",
			Handler:    _TaskRepo_UpdateCompanyWithFormData_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _TaskRepo_DeleteCompany_Handler,
		},
		{
			MethodName: "GetCompanyEmployeesList",
			Handler:    _TaskRepo_GetCompanyEmployeesList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x51, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x25, 0xe9, 0xb6, 0x49, 0x6e, 0x6d, 0xd5, 0x79, 0xd0, 0x6c, 0x64, 0xb1, 0xe4, 0xa9, 0x20,
	0xe4, 0x61, 0x7d, 0x94, 0x95, 0x15, 0xeb, 0xea, 0x42, 0xd9, 0x87, 0xe0, 0x07, 0xf8, 0x12, 0xc6,
	0xce, 0xd5, 0x1d, 0x4c, 0x32, 0x43, 0x66, 0xaa, 0xf4, 0xe7, 0xf9, 0x83, 0xfc, 0x0f, 0x92, 0xc9,
	0x4c, 0x4b, 0x69, 0x15, 0x8d, 0x6f, 0x73, 0x3f, 0xce, 0x99, 0x73, 0xce, 0x85, 0x89, 0xc2, 0xe6,
	0x1b, 0x5f, 0x61, 0x26, 0x1b, 0xa1, 0x05, 0x09, 0xa9, 0xe4, 0xe6, 0x95, 0xfe, 0xf0, 0x20, 0x7c,
	0x55, 0xc9, 0x52, 0x6c, 0x10, 0xc9, 0x14, 0x7c, 0xce, 0x62, 0x6f, 0xe6, 0xcd, 0x07, 0xb9, 0xcf,
	0x19, 0x21, 0x70, 0x52, 0xd3, 0x0a, 0x63, 0x7f, 0xe6, 0xcd, 0xa3, 0xdc, 0xbc, 0xc9, 0x63, 0x18,
	0x2b, 0x5c, 0x89, 0x9a, 0x15, 0x66, 0x34, 0x30, 0x23, 0xe8, 0x5a, 0x37, 0xed, 0x42, 0x0c, 0x81,
	0x5a, 0x37, 0x66, 0x78, 0x62, 0x86, 0xae, 0x24, 0x8f, 0x20, 0xba, 0xe5, 0x0d, 0x16, 0x8c, 0x6a,
	0x8c, 0x87, 0x66, 0x16, 0xb6, 0x8d, 0x05, 0xd5, 0x48, 0x12, 0x08, 0xa5, 0x50, 0x5c, 0x73, 0x51,
	0xc7, 0xa3, 0x6e, 0xe6, 0x6a, 0x72, 0x06, 0xb0, 0x12, 0x95, 0xa4, 0xf5, 0xa6, 0xe0, 0x2c, 0x0e,
	0x8c, 0xbe, 0xc8, 0x76, 0xae, 0x59, 0xba, 0x84, 0xe0, 0x65, 0x57, 0xfc, 0x95, 0x83, 0x33, 0x80,
	0x12, 0xbf, 0xd0, 0xb2, 0xf8, 0x2c, 0x9a, 0xca, 0x1a, 0x88, 0x4c, 0xe7, 0x4a, 0x34, 0x55, 0xfa,
	0x11, 0xee, 0xe5, 0xa8, 0xa4, 0xa8, 0x15, 0x6e, 0x83, 0x79, 0x00, 0x23, 0xa5, 0xa9, 0x5e, 0x2b,
	0x43, 0x3d, 0xcc, 0x6d, 0x45, 0x32, 0x08, 0xd1, 0xee, 0xc4, 0xfe, 0x6c, 0x30, 0x1f, 0x9f, 0x93,
	0xcc, 0x45, 0x9b, 0x39, 0x74, 0xbe, 0xdd, 0x49, 0xdf, 0xc3, 0x5d, 0xc7, 0xed, 0x14, 0xff, 0x8e,
	0xfa, 0x09, 0x04, 0xd6, 0xa1, 0x65, 0xbe, 0xbf, 0x63, 0xb6, 0xd8, 0xdc, 0x6d, 0x9c, 0xff, 0x1c,
	0x42, 0xf8, 0x96, 0xaa, 0xaf, 0x39, 0x4a, 0x41, 0x2e, 0x61, 0xfa, 0x82, 0xb1, 0x1b, 0xfc, 0xbe,
	0x95, 0x7f, 0x44, 0x54, 0x92, 0xec, 0x7a, 0x07, 0x76, 0x2f, 0x61, 0xfa, 0x4e, 0xb6, 0x57, 0xea,
	0xcd, 0xf0, 0x1c, 0xee, 0x5c, 0xf1, 0x9a, 0xf5, 0xc6, 0x2f, 0x21, 0xd9, 0x57, 0xf0, 0x81, 0xeb,
	0xdb, 0xf6, 0x3c, 0x0b, 0xaa, 0x69, 0x1f, 0x3f, 0x0b, 0x2c, 0xf1, 0x3f, 0xfc, 0x5c, 0xc0, 0xa4,
	0xcb, 0xd4, 0x9d, 0xed, 0xf0, 0x1a, 0xc9, 0xe9, 0x21, 0xde, 0x6d, 0x5f, 0xc0, 0xa4, 0xb3, 0xd3,
	0x0f, 0xfe, 0x0c, 0xc6, 0x6d, 0x9a, 0xfd, 0xc0, 0xd7, 0x70, 0xba, 0xf7, 0xf7, 0x5e, 0x92, 0xff,
	0x6c, 0xa3, 0xcb, 0xb1, 0x9f, 0x92, 0x37, 0xf0, 0xf0, 0x35, 0x6a, 0x5b, 0xb9, 0x68, 0xd5, 0x92,
	0x2b, 0x7d, 0x8c, 0xe8, 0x0f, 0xe7, 0xf8, 0x34, 0x32, 0xfd, 0xa7, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xab, 0xd8, 0xfe, 0x23, 0xd7, 0x04, 0x00, 0x00,
}
